	Documento de definição de estilo e design para o projeto
	
FGA- Universidade de Brasília
Técnicas de Programação
Prof: Mauricio Serrano

Grupo:  João Henrique 11/0149278
	Rafael Fazzolino
	Rudmar	Rodrigues			
	Thabata Granja	09//0139658
	
Projeto trabalhado: Chamada Parlamentar.
Repositório: https://github.com/RafaelFazzolino/TecProg
Repositório original: https://github.com/Thiagokairala/ChamadaParlamentar2


Índice:
	1. Informações
		1.1 - Objetivo do documeto
		1.2 - Tamanho do software
	2. Sobre organização do código
		2.1 - Atribuições de variáveis
		2.2 - Métodos e chaves
		2.3 - Identação If/Else
		2.4 - Limite de escrita
		2.5 - Estrutura for
		2.6- Estrutura while
		2.7 - Biblioteca
	3. A respeito da identação 
		3.1 -  Comprimento de linha
		3.2 -  Quebra de linha
		3.3 -  Início do texto 	
	4. Funções
		4.1 - Funções e chaves
	5. Variáveis no código
		5.1 - Padrão de escrita das variáveis
		5.2 - Inicialização de variáveis
		5.3 - Declaração de variáveis
		5.4 - Sobre nome de variáveis
	6. Comentários
		6.1 - Como criar um comentário
		6.2 - Padrão de comentário
	7. Classes
		7.1 - Classes e javaDoc
		7.2 - Padrão de escrita de classes
	8. Exemplificando o código

__________________________________________________________________________________________________________________________________________________________

1.Informações 

	1.1 Objetivo do documento
		Neste documento serão apresentados todos os padrões utilizados no projeto, como forma de utilização de variáveis, chaves, métodos e etc.
	
	1.2 - Tamanho do Software
		-------------------------------------------------------------------------------
		Language                     files          blank        comment           code
		-------------------------------------------------------------------------------
		Javascript                      35           5596           6763          27254
		Java                           100           1734            955           6950
		JSP                             19            225             10            970
		CSS                             20            113              0            597
		Maven                            1             25              0            105
		XML                              1             15              0             94
		HTML                             2             10              0             36
		-------------------------------------------------------------------------------
		SUM:                           178           7718           7728          36006
		-------------------------------------------------------------------------------

2. Sobre a Organização do Codigo:
	
	2.1- Em casos de atribuições, os ítens deverão ser separados por espaço, nada poderá ficar colado. Ex:
	"x = 2"
	
	2.2- Todas as chaves deverão ser abertas com um espaço do fim do método e na mesma linha. Ex:
	"int soma() {"

	2.3- Em casos de comparações, os itens deverão ser separados por espaço, nada poderá ficar colado. Ex:
	"if ( x < 2 ) {"

	2.4- Em casos de switch, os intens serão separados a medida que se troca de caso, por uma linha de espaço 		após o break e devem estar no mesmo nível. Ex:
	"switch (diaDaSemana) {
            case 1:
                System.out.println("Domingo");
                break;

            case 2:
                System.out.println("Segunda-feira");
                break;

            default:
                 System.out.println("Outro dia\n");

         }"
	
	2.5- Estrutura for deve seguir o seguinte modelo, um espaço entre suas condições. Ex:
	"for (int i = 0; i < listaPedidos; i++) {
		}"

	2.6- Estrutura while, deve seguir o seguinte padrão, um espaço depois do while, e sua declaração vem um 	nível a direita. Ex:
	"while (contador < 50) {
		System.out.println("Repetição numero: " + contador);
		contador++;
		}
	
	2.7- O código não deve sair nunca da vista de quem escreve, em termos das linhas verticais do ambiente de 		programação, em caso de necessidade de ultrapassar o limite vertical, deve-se obedecer as seguintes regras:
		2.7.1- Quebrar a linha depois da vírgula;
		       Qebrar a linha antes do operador;
	 	       A linha deve começar no mesmo nível do sua expressão de origem
	
	2.8 - As bibliotecas serão escritas separadas por espaçamento entre os termos
	

3. A identação deve seguir o padrão java. Utilizando TAB para o espaçamento de identação.
	3.1 Comprimento de cada Linha
	 
		Linha de no máximo 140 caracteres, incluindo espaços em branco 
	
	3.2 Quebra de Linha
 
		Caso a expressão seja maior que a linha, o critério de quebra de linha será: 
­		Quebrar linha depois da vírgula; 
­ 		Quebrar linha antes do operador; 
­		A nova linha deve começar no mesmo nível da linha da expressão de origem. 

	3.3 Início do Texto
 
­ 		Cada nova função/método deve ser iniciada junto ao canto da tela; 
­   		Para   cada   nova   estrutura   dentro   de   uma   função/método,   essa   deve   possuir   um   			(1)espaçamento de tabulação a mais que o elemento anterior a ele. 

4. Sobre as Funções no código

	4.1- Todas as funções deverão ter chaves, mesmo aquelas que seu bloco só possui uma linha. Ex:
	"if ( x < 2 ) { 
		x++;
	}"


5. Sobre as variáveis no codigo:

	5.1- Todas as variáveis deverão ser escritas seguindo o padrão CamelCase mais precisamente lowerCamelCase,onde a palavra é 		iniciada com letra minúsculas e unidas sem espaços, exceto quando for a união de duas palavras, neste caso a primeira letra da 		segunda palavra deverá ser maiúscula Ex:
		"calcularValor() {
		}

	5.2- Toda variável deverá ser inicializada antes de usada. Ex:
		"int x;
		x = 0;"

	5.3- Cada variável deverá ser declarada em uma linha, para que possam ser feitos comentários únicos para cada variável de forma 	organizada. Ex:
		"int x;
	 	int y;
		int x;"
	
	5.4- As variáveis devem levar nomes que se relacionem com suas funções. Ex:
		"String nomeAluno;
		 String nomeProfessor;
	 	 String nomeMonitor;"

		5.4.1- -Todas as variáveis deverão conter nomes significativos em inglês para melhor entendimento de terceiros..


6. Sobre os Comentários 

	6.1- Todos os comentários deverão ser criados utilizando "/*" e "*/", não poderão ser feitos com "//". Ex:
	"int x; /* Variável para alguma coisa. */"

	6.2- Em todos os comentários, cada item deverá ser separado por espaço, nada poderá ficar colado. E todo fim de comentário deve 	terminar com um ponto final. Ex:
		"int x; /* Variável para alguma coisa. */"


7. Sobre as classes 

	7.1- Toda classe deverá conter documentação javaDoc.

	7.2- Todas as classes deverão ser escritas seguindo o padrão CamelCase mais precisamente UpperCamelCase,onde a palavra é iniciada 		com Maiúsculas e unidas sem espaços. Ex:
		"Aluno() {
		}


8. Exemplificando em código.

public class Aluno extends Pessoa {

	/* Atributos */
	private String matricula;
	private String ingresso;
	private String periodo;
	private String formaDeIngresso;
	private String portadorDeNecessidades;
	private Nota[] notas;
	private Disciplina[] disciplinas;
	
	/* Construtores */
	public Aluno() {
	}
	
	public Aluno(String novoNome, String novoPeriodo) {
		this.setNome(novoNome);
		this.setPeriodo(novoPeriodo);
		this.setPortadorDeNecessidades(necEsp);
		
	}

	/* Getters and Setters */
	public String getMatricula() {
		return matricula;
	}
	
	public void setMatricula(String matricula) {
		this.matricula = matricula;
	}
	
	public String getIngresso() {
		return ingresso;
	}
	
	public void setIngresso(String ingresso) {
		this.ingresso = ingresso;
	}
	
	public String getPeriodo() {
		return periodo;
	}
	
	public void setPeriodo(String periodo) {
		this.periodo = periodo;
	}
	
	public String getFormaDeIngresso() {
		return formaDeIngresso;
	}
	
	public void setFormaDeIngresso(String formaDeIngresso) {
		this.formaDeIngresso = formaDeIngresso;
	}
	
	public String getPortadorDeNecessidades() {
		return portadorDeNecessidades;
	}
	
	public void setPortadorDeNecessidades(String portadorDeNecessidades) {
		this.portadorDeNecessidades = portadorDeNecessidades;
	}
	
	public Nota[] getNotas() {
		return notas;
	}
	
	public void setNotas(Nota[] notas) {
		this.notas = notas;
	}
	
	public Disciplina[] getDisciplinas() {
		return disciplinas;
	}
	
	public void setDisciplinas(Disciplina[] disciplinas) {
		this.disciplinas = disciplinas;
	}
	
	/* Métodos */
	public void adicionarNota(Nota nota){
		
		int tamanhoAntigo = this.notas.length;
		
		Nota[] novasNotas = new Nota[tamanhoAntigo+1];
		
		for(int i=0; i<tamanhoAntigo; i++) {
			novasNotas[i] = this.notas[i];
		}
		
		novasNotas[novasNotas.length-1] = nota;
		
		this.setNotas(novasNotas);
	}

	public void adicionarDisciplina(Disciplina disciplina) {
		
		int tamanhoAntigo = this.disciplinas.length;
		
		Disciplina[] novasDisciplinas = new Disciplina[tamanhoAntigo+1];
		
		for(int i=0; i<tamanhoAntigo; i++){
			novasDisciplinas[i] = this.disciplinas[i];
		}
		
		novasDisciplinas[novasDisciplinas.length-1] = disciplina;
		
		this.setDisciplinas(novasDisciplinas);
	}

}

